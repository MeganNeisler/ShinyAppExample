set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[inTrain, ]
testing = concrete[-inTrain, ]
set.seed(325)
library(e1071)
mod_svm <- svm(CompressiveStrength ~ ., data = training)
pred_svm <- predict(mod_svm, testing)
accuracy(pred_svm, testing$CompressiveStrength)
library(caret)
accuracy(pred_svm, testing$CompressiveStrength)
library(forecast)
install.packages("forecast")
library(forecast)
accuracy(pred_svm, testing$CompressiveStrength)
trainUrl <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testUrl <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
training <- read.csv(url(trainUrl), na.strings=c("NA","#DIV/0!",""), header= TRUE)
testing <- read.csv(url(testUrl), na.strings=c("NA","#DIV/0!",""), header = TRUE)
library(caret)
library(randomForest)
library(ggplot2)
library(plyr)
library(splines)
nsv <- nearZeroVar(training, saveMetrics = TRUE)
naSUM <- sapply(training, function(n) sum(length(which(is.na(n)))))
table(nzv$nzv, naSUM)
nsv <- nearZeroVar(training, saveMetrics = TRUE)
naSUM <- sapply(training, function(n) sum(length(which(is.na(n)))))
table(nzv$nzv, naSUM)
na_count <- sapply(training, function(n) sum(length(which(is.na(n)))))
nzv <- nearZeroVar(training, saveMetrics = TRUE)
table(nzv$nzv, na_count)
naSUM <- sapply(training, function(n) sum(length(which(is.na(n)))))
nsv <- nearZeroVar(training, saveMetrics = TRUE)
table(nzv$nzv, naSUM)
cleanTraining <- training[,nzv$nzv==FALSE & na_count < 19216]
cleanTraining <- cleanTraining[c(-1)]
set.seed(3456)
inTrain <- createDataPartition(y= cleanTraining$classe, p=0.7, list=FALSE)
myTraining <- cleanTraining[inTrain,]
myTesting <- cleanTraining[-inTrain,]
dim(myTraining); dim(myTesting)
set.seed(5678)
modFit_DT <- train(classe ~ ., data = myTraining, method="rpart")
library(rattle)
fancyRpartPlot(modfit_DT$finalmodel)
fancyRpartPlot(modFit_DT$finalmodel)
modFit_DT <- rpart(classe ~ ., data=myTraining, method="class")
fancyRpartPlot(modFit_DT)
library(rpart)
fancyRpartPlot(modFit_DT)
library(rplot.plot)
install.packages(rplot.plot)
install.packages("rpart.plot")
library(rplot.plot)
library(rpart.plot)
fancyRpartPlot(modFit_DT)
prediction_DT <- predict(modFit_DT, myTesting, type = "class")
confusionMatrix(prediction_DT, myTesting$classe)
set.seed(34567)
modFit_RF <- train(classe ~ ., data = myTraining, method = "rf", prox = TRUE)
dt_outofsample = (confusionMatrix(prediction_DT, myTesting$classe))$overall[1]
modFit_RF <- train(classe ~ ., data = myTraining, method = "rf", prox = TRUE)
set.seed(34567)
modFit_RF <- randomForest(classe ~ ., data = myTraining, ntree = 500, importance = TRUE)
prediction_RF <- predict(modFit_RF$finalModel, data =myTesting)
confusionMatrix(prediction_RF, myTesting$classe)
library(caret)
prediction_RF <- predict(modFit_RF$finalModel, data =myTesting)
prediction_RF <- predict(modFit_RF$finalModel, data =myTesting, type = "class")
prediction_RF <- predict(modFit_RF$, data =myTesting, type = "class")
prediction_RF <- predict(modFit_RF, data =myTesting, type = "class")
confusionMatrix(prediction_RF, myTesting$classe)
set.seed(34567)
modFit_RF <- randomForest(classe ~ ., data = myTraining, ntree = 1000)
prediction_RF <- predict(modFit_RF, data = myTesting, type = "class")
confusionMatrix(prediction_RF, myTesting$classe)
trainUrl <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testUrl <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
# We import the data treating empty values as NA.
training <- read.csv(url(trainUrl), na.strings=c("NA","#DIV/0!",""), header= TRUE)
testing <- read.csv(url(testUrl), na.strings=c("NA","#DIV/0!",""), header = TRUE)
naSUM <- sapply(training, function(n) sum(length(which(is.na(n)))))
nsv <- nearZeroVar(training, saveMetrics = TRUE)
table(nzv$nzv, naSUM)
cleanTraining <- training[,nzv$nzv==FALSE & na_count < 19216]
cleanTraining <- cleanTraining[c(-1)]
set.seed(3456)
inTrain <- createDataPartition(y= cleanTraining$classe, p=0.7, list=FALSE)
myTraining <- cleanTraining[inTrain,]
myTesting <- cleanTraining[-inTrain,]
dim(myTraining); dim(myTesting)
set.seed(34567)
modFit_RF <- randomForest(classe ~ ., data = myTraining, ntree = 1000)
prediction_RF <- predict(modFit_RF, data = myTesting, type = "class")
confusionMatrix(prediction_RF, myTesting$classe)
trainUrl <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testUrl <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
# We import the data treating empty values as NA.
training <- read.csv(url(trainUrl), na.strings=c("NA","#DIV/0!",""), header= TRUE)
testing <- read.csv(url(testUrl), na.strings=c("NA","#DIV/0!",""), header = TRUE)
naSUM <- sapply(training, function(n) sum(length(which(is.na(n)))))
nsv <- nearZeroVar(training, saveMetrics = TRUE)
table(nzv$nzv, naSUM)
cleanTraining <- training[,nzv$nzv==FALSE & na_count < 19216]
cleanTraining <- cleanTraining[c(-1)]
set.seed(3456)
inTrain <- createDataPartition(y= cleanTraining$classe, p=0.7, list=FALSE)
myTraining <- cleanTraining[inTrain,]
myTesting <- cleanTraining[-inTrain,]
dim(myTraining); dim(myTesting)
modFit_DT <- rpart(classe ~ ., data = myTraining, method="class")
fancyRpartPlot(modFit_DT)
set.seed(5678)
prediction_DT <- predict(modFit_DT, myTesting, type = "class")
confusionMatrix(prediction_DT, myTesting$classe)
dt_outofsample = (confusionMatrix(prediction_DT, myTesting$classe))$overall[1]
set.seed(5678)
modFit_RF <- randomForest(classe ~ ., data = myTraining, ntree = 1000)
prediction_RF <- predict(modFit_RF, myTesting, type = "class")
confusionMatrix(prediction_RF, myTesting$classe)
plot(modFit_RF)
rf_outofsample = (confusionMatrix(prediction_RF, myTesting$classe))$overall[1]
rf_outofsample
1-rf_outofsample
PredictionCompare = data.frame(DT=as.vector(prediction_DT),
rf=as.vector(prediction_RF))
PredictionCompare
out.of.sample.errors = c(as.numeric(1-dt_outofsample),
as.numeric(1-rf_outofsample))
names(out.of.sample.errors) = c("DT","RF")
out.of.sample.errors
confusionMatrix(prediction_RF, myTesting$classe)
confusionMatrix(prediction_DT, myTesting$classe)
out.of.sample.errors = c(as.numeric(1-dt_outofsample),
as.numeric(1-rf_outofsample))
names(out.of.sample.errors) = c("DT","RF")
out.of.sample.errors
prediction_RFfinal <- predict(modFit_RF, newdata = testing)
prediction_RFfinal
prediction_RFfinal <- predict(modFit_RF, data = testing, type = "class")
prediction_RFfinal
confusionMatrix(prediction_RFfinal,testing$classe)
prediction_RFfinal <- predict(modFit_RF, newdata = testing)
prediction_RFfinal <- predict(modFit_RF, newdata = testing, type = "class")
prediction_RFfinal <- predict(modFit_RF, data = testing, type = "class")
confusionMatrix(prediction_RFfinal,testing$classe)
out.of.sample.errors = c(as.numeric(1-dt_outofsample),
as.numeric(1-rf_outofsample))
names(out.of.sample.errors) = c("DT","RF")
out.of.sample.errors
confusionMatrix(prediction_RF, myTesting$classe)
```
rf_outofsample
1-rf_outofsample
(1-rf_outofsample)*100
prediction_RFfinal <- predict(modFit_RF, data = testing, type = "class")
head(prediction_RFfinal,20)
prediction_RFfinal <- predict(modFit_RF, testing, type = "class")
prediction_RFfinal
prediction_RFfinal <- predict(modFit_RF, newdata = testing, type = "class")
head(prediction_RFfinal, 20)
prediction_RFfinal <- predict(modFit_RF, newdata = testing)
prediction_RFfinal <- predict(modFit_RF, newdata = testing, type = "class")
prediction_RFfinal <- predict(modFit_RF, newdata = testing)
prediction_RFfinal <- predict(modFit_RF, testing)
prediction_RFfinal <- predict(modFit_RF, testing, type = "class")
levels(testing$classe) <- levels(training$classe)
prediction_RFfinal <- predict(modFit_RF, newdata = testing, type = "class")
prediction_RFfinal <- predict(modFit_RF, data = testing, type = "class")
prediction_RFfinal
training <- read.csv(url(trainUrl), na.strings=c("", "NA"), header= TRUE)
testing <- read.csv(url(testUrl), na.strings=c("", "NA"), header = TRUE)
naSUM <- sapply(training, function(n) sum(length(which(is.na(n)))))
nsv <- nearZeroVar(training, saveMetrics = TRUE)
table(nzv$nzv, naSUM)
cleanTraining <- training[,nzv$nzv==FALSE & na_count < 19216]
cleanTraining <- cleanTraining[c(-1)]
set.seed(3456)
inTrain <- createDataPartition(y= cleanTraining$classe, p=0.7, list=FALSE)
myTraining <- cleanTraining[inTrain,]
myTesting <- cleanTraining[-inTrain,]
dim(myTraining); dim(myTesting)
set.seed(5678)
modFit_RF <- randomForest(classe ~ ., data = myTraining, ntree = 1000)
prediction_RF <- predict(modFit_RF, myTesting, type = "class")
confusionMatrix(prediction_RF, myTesting$classe)
rf_outofsample = (confusionMatrix(prediction_RF, myTesting$classe))$overall[1]
prediction_RFfinal <- predict(modFit_RF, data = testing, type = "class")
confusionMatrix(prediction_RFfinal, myTesting$classe)$overall[1]
prediction_RFfinal <- predict(modFit_RF, testing)
prediction_RFfinal <- predict(modFit_RF, data = testing, type = "class")
confusionMatrix(prediction_RFfinal, testing$classe)$overall[1]
prediction_RFfinal <- predict(modFit_RF, data = testing, type = "class", na.action = na.pass)
confusionMatrix(prediction_RFfinal, testing$classe)$overall[1]
prediction_RFfinal <- predict(modFit_RF, testing)
prediction_RFfinal <- predict(modFit_RF, testing, type = "class")
prediction_RFfinal <- predict(modFit_RF, testing)
prediction_RFfinal <- predict(modFit_RF, data = testing, type = "class")
confusionMatrix(prediction_RFfinal, myTesting$classe)
prediction_RFfinal <- predict(modFit_RF, data = testing, type = "class")
confusionMatrix(prediction_RFfinal, testing$classe)
head(prediction_RFfinal)
head(prediction_RF)
training <- read.csv(url(trainUrl), na.strings=c("", "NA"), header= TRUE)
testing <- read.csv(url(testUrl), na.strings=c("", "NA"), header = TRUE)
naSUM <- sapply(training, function(n) sum(length(which(is.na(n)))))
nsv <- nearZeroVar(training, saveMetrics = TRUE)
table(nzv$nzv, naSUM)
cleanTraining <- training[,(!nzv$nzv & na_count < 19216)]
cleanTraining <- cleanTraining[c(-1)]
set.seed(3456)
inTrain <- createDataPartition(y= cleanTraining$classe, p=0.7, list=FALSE)
myTraining <- cleanTraining[inTrain,]
myTesting <- cleanTraining[-inTrain,]
dim(myTraining); dim(myTesting)
modFit_DT <- rpart(classe ~ ., data = myTraining, method="class")
prediction_DT <- predict(modFit_DT, myTesting, type = "class")
confusionMatrix(prediction_DT, myTesting$classe)
set.seed(5678)
modFit_RF <- randomForest(classe ~ ., data = myTraining, ntree = 1000)
prediction_RF <- predict(modFit_RF, myTesting, type = "class")
confusionMatrix(prediction_RF, myTesting$classe)
prediction_RFfinal <- predict(modFit_RF, data = testing, type = "class")
confusionMatrix(prediction_RFfinal, testing$classe)
prediction_RFfinal <- predict(modFit_RF, newdata = testing)
prediction_RFfinal <- predict(modFit_RF, newdata = testing, type = "class")
prediction_RF <- predict(modFit_RF, myTesting)
confusionMatrix(prediction_RF, myTesting$classe)
prediction_RFfinal <- predict(modFit_RF, newdata = testing)
prediction_RFfinal <- predict(modFit_RF, testing, type = "class"
prediction_RFfinal <- predict(modFit_RF, testing, type = "class")
prediction_RFfinal <- predict(modFit_RF, data = testing, type = "class")
confusionMatrix(prediction_RFfinal, testing$classe)
training <- read.csv(url(trainUrl), na.strings=c("", "NA"), header= TRUE)
testing <- read.csv(url(testUrl), na.strings=c("", "NA"), header = TRUE)
na_count <- sapply(training, function(n) sum(length(which(is.na(n)))))
nzv <- nearZeroVar(training, saveMetrics = TRUE)
table(nzv$nzv, na_count)
cleanTraining <- training[,(!nzv$nzv & na_count < 19216)]
cleanTraining <- cleanTraining[c(-1)]
set.seed(3456)
inTrain <- createDataPartition(y= cleanTraining$classe, p=0.7, list=FALSE)
myTraining <- cleanTraining[inTrain,]
myTesting <- cleanTraining[-inTrain,
myTesting <- cleanTraining[-inTrain,]
fitControl <- trainControl(method="cv", number = 5, allowParallel = TRUE)
fitRF <- train(classe ~ ., data=myTraining, method="rf", trControl = fitControl)
set.seed(5678)
modFit_RF <- randomForest(classe ~ ., data = myTraining, ntree = 1000)
prediction_RF <- predict(modFit_RF, myTesting, type = "class")
confusionMatrix(prediction_RF, myTesting$classe)
prediction_RFfinal <- predict(modFit_RF, testing, type = "class")
levels(testing$variableName) <- levels(myTraining$classe)
head(testing, 5)
head(myTesting)
trainUrl <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testUrl <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
# We import the data treating empty values as NA.
training <- read.csv(url(trainUrl), na.strings=c("", "NA"), header= TRUE)
testing <- read.csv(url(testUrl), na.strings=c("", "NA"), header = TRUE)
naSUM <- sapply(training, function(n) sum(length(which(is.na(n)))))
nsv <- nearZeroVar(training, saveMetrics = TRUE)
table(nzv$nzv, naSUM)
cleanTraining <- training[,(!nzv$nzv & na_count < 19216)]
cleanTraining <- cleanTraining[, -c(-1)]
cleanTraining <- cleanTraining[, -c(-1:6)]
trainUrl <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testUrl <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
# We import the data treating empty values as NA.
training <- read.csv(url(trainUrl), na.strings=c("", "NA"), header= TRUE)
testing <- read.csv(url(testUrl), na.strings=c("", "NA"), header = TRUE)
naSUM <- sapply(training, function(n) sum(length(which(is.na(n)))))
nsv <- nearZeroVar(training, saveMetrics = TRUE)
table(nzv$nzv, naSUM)
cleanTraining <- training[,(!nzv$nzv & na_count < 19216)]
cleanTraining <- cleanTraining[, -c(-1:6)]
cleanTraining <- cleanTraining[, -c(1:6)]
set.seed(3456)
inTrain <- createDataPartition(y= cleanTraining$classe, p=0.7, list=FALSE)
myTraining <- cleanTraining[inTrain,]
myTesting <- cleanTraining[-inTrain,]
dim(myTraining); dim(myTesting)
set.seed(5678)
modFit_RF <- randomForest(classe ~ ., data = myTraining, ntree = 1000)
prediction_RF <- predict(modFit_RF, myTesting, type = "class")
confusionMatrix(prediction_RF, myTesting$classe)
prediction_RFfinal <- predict(modFit_RF, testing, type = "class")
confusionMatrix(prediction_RFfinal, testing$classe)
head(prediction_RFfinal, 20)
trainUrl <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testUrl <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
# We import the data treating empty values as NA.
training <- read.csv(url(trainUrl), na.strings=c("", "NA"), header= TRUE)
testing <- read.csv(url(testUrl), na.strings=c("", "NA"), header = TRUE)
naSUM <- sapply(training, function(n) sum(length(which(is.na(n)))))
nsv <- nearZeroVar(training, saveMetrics = TRUE)
table(nzv$nzv, naSUM)
cleanTraining <- training[,(!nzv$nzv & na_count < 19216)]
cleanTraining <- cleanTraining[, -c(1:6)]
set.seed(3456)
inTrain <- createDataPartition(y= cleanTraining$classe, p=0.7, list=FALSE)
myTraining <- cleanTraining[inTrain,]
myTesting <- cleanTraining[-inTrain,]
dim(myTraining); dim(myTesting)
modFit_DT <- rpart(classe ~ ., data = myTraining, method="class")
fancyRpartPlot(modFit_DT)
set.seed(5678)
prediction_DT <- predict(modFit_DT, myTesting, type = "class")
confusionMatrix(prediction_DT, myTesting$classe
set.seed(5678)
prediction_DT <- predict(modFit_DT, myTesting, type = "class")
confusionMatrix(prediction_DT, myTesting$classe)
dt_outofsample = (confusionMatrix(prediction_DT, myTesting$classe))$overall[1]
set.seed(5678)
modFit_RF <- randomForest(classe ~ ., data = myTraining, ntree = 1000)
prediction_RF <- predict(modFit_RF, myTesting, type = "class")
confusionMatrix(prediction_RF, myTesting$classe)
dt_outofsample = (confusionMatrix(prediction_DT, myTesting$classe))$overall[1]
rf_outofsample = (confusionMatrix(prediction_RF, myTesting$classe))$overall[1]
out.of.sample.errors = c(as.numeric(1-dt_outofsample),
as.numeric(1-rf_outofsample))
names(out.of.sample.errors) = c("DT","RF")
out.of.sample.errors
```{r}
prediction_RFfinal <- predict(modFit_RF, testing, type = "class")
prediction_RFfinal
install.packages("rpart.plot")
naSUM <- sapply(training, function(n) sum(length(which(is.na(n)))))
nsv <- nearZeroVar(training, saveMetrics = TRUE)
table(nzv$nzv, naSUM)
nsv <- nearZeroVar(training, saveMetrics = TRUE)
table(nzv, naSUM)
table(nzv$nzv, naSUM)
naSUM <- sapply(training, function(n) sum(length(which(is.na(n)))))
nearVar <- nearZeroVar(training, saveMetrics = TRUE)
table(nearVar$nzv, naSUM)
install.packages("leaflet")
library(leaflet)
my_map <- leaflet() %>% addTiles()
my_map
library(leaflet)
df <- data.frame(lat = runif(20, min = 39.2, max = 39.3),
lng = runif(20, min = -76.6, max = -76.5))
df %>%
leaflet() %>%
addTiles() %>%
addMarkers()
df(leaflet(addTiles()))
leaflet(addTiles(df))
addTiles(leaflet(df()))
addTiles(leaflet(df))
leaflet(df) %>% addTiles()
install.packages("leaflet")
library(leaflet)
sparkIcon <- makeIcon(
iconUrl = "http://sfrecpark.org/wp-content/uploads/SF_RecPark_Logo4.png",
iconWidth = 31*215/230, iconHeight = 31,
iconAnchorX = 31*215/230/2, iconAnchorY = 16
)
set.seed(2016-11-06)
df <- data.frame( lat = c(37.7924566, 37.7779316, 37.7684421, 37.7532508, 37.7466678, 37.7523686),
lng = c(-122.4260578, -122.4488157, -122.4343834,-122.460038, -122.4648874,-122.4734061))
sfparkIcon <- makeIcon(
iconUrl = "http://sfrecpark.org/wp-content/uploads/SF_RecPark_Logo4.png",
iconWidth = 31*215/230, iconHeight = 31,
iconAnchorX = 31*215/230/2, iconAnchorY = 16
)
set.seed(2016-11-06)
df <- data.frame( lat = c(37.7924566, 37.7779316, 37.7684421, 37.7532508, 37.7466678, 37.7523686),
lng = c(-122.4260578, -122.4488157, -122.4343834,-122.460038, -122.4648874,-122.4734061))
sfparkSites <- c(
"<a href='http://sfrecpark.org/destination/alta-plaza-park/'>Alta Plaza Park</a>",
"<a href='http://sfrecpark.org/destination/lafayette-park/'>Lafayette Park</a>",
"<a href='http://sfrecpark.org/destination/buena-vista-park/'>Buena Vista Park</a>",
"<a href='http://sfrecpark.org/destination/twin-peaks/'>Twin Peaks</a>",
"<a href='http://sfrecpark.org/destination/mt-davidson-park/'>Mt. Davidson Park</a>",
"<a href='http://sfrecpark.org/destination/grand-view-park/'>Grand View Park</a>"
)
sfpark_map <- df %>%
leaflet() %>%
addTiles() %>%
addMarkers(icon = sfparkIcon, popup = sfparkSites)
sfpark_map
install.packages("DDPQuiz3")
install.packages("DDPQuiz3")
install.packages("~/Desktop/DDPQuiz3_1.0.zip", repos = NULL, type = "win.binary")
head(faithful)
install.packages("plotly")
library("faithful")
library(faithful)
head(quakes)
head(rivers)
head(Titanic)
summary(Titanic)
dim(titanic)
dim(Titanic)
Titanic
head(ToothGrowth)
head(trees)
plot_ly(mtcars, x = wt, y = mpg, mode = "markers", color = disp)
library(plotly)
plot_ly(mtcars, x = wt, y = mpg, mode = "markers", color = disp)
girth$trees
head(trees)
mtcars@cyl
mtcars$cyl
trees$Girth
?plotly
plot_ly(mtcars, x = wt, y = mpg, mode = "markers",
color = as.factor(cyl), size = hp)
plot_ly(mtcars, x = mtcars$wt, y = mtcars$mpg, mode = "markers",
color = as.factor(mtcars$cyl), size = mtcars$hp)
plot_ly(mtcars, type = "scater" x = mtcars$wt, y = mtcars$mpg, mode = "markers",
color = as.factor(mtcars$cyl), size = mtcars$hp)
plot_ly(mtcars, type = "scatter" x = mtcars$wt, y = mtcars$mpg, mode = "markers",
color = as.factor(mtcars$cyl), size = mtcars$hp)
plot_ly(mtcars, type = "scatter", x = mtcars$wt, y = mtcars$mpg, mode = "markers",
color = as.factor(mtcars$cyl), size = mtcars$hp)
head(trees)
plot_ly(trees, type = "scatter", x = trees$Girth, y = trees$Height, mode = "markers",
size = trees$Volume)
plot_ly(mtcars, type = "scatter", x = mtcars$wt, y = mtcars$mpg, mode = "markers",
color = as.factor(mtcars$cyl), size = mtcars$hp)
plot_ly(trees, type = "scatter", x = trees$Girth, y = trees$Height, mode = "markers",
color = trees$Volume)
plot_ly(trees, type = "scatter", x = trees$Girth, y = trees$Height, mode = "markers",
color = trees$Volume, showlegend = TRUE)
plot_ly(trees,  x = trees$Girth, y = trees$Height, type = "scatter", mode = "markers",
color = trees$Volume) %>%
layout(xaxis = x, yaxis = y, showlegend = TRUE)
plot_ly(mtcars, x = wt, y = mpg, mode = "markers", color = disp)
plot_ly(mtcars, x = mtcars$wt, y = mtcars$mpg, mode = "markers", color = disp)
plot_ly(mtcars, x = mtcars$wt, y = mtcars$mpg, mode = "markers", color = mtcars$disp)
head(swiss)
head(mtcars)
head(cars)
cars
dim(cars)
summary(cars)
head(ChickWeight)
head(BOD)
head(Titanic)
Titanic
swiss
trees
head(airquality)
summary(ozone)
summary(airquality
summary(airquality)
head(mtcars)
head(airquality)
head(cars)
?lm
head(mtcars)
mtcars$mspg
mtcars$mpgsp
?sliderInput
head(cars)
summary(cars)
summary(mtcars)
shiny::runApp('ShinyAppExample/Swiss')
runApp('ShinyAppExample/Swiss')
cars
head(cars)
length(cars$dist)
length(cars$speed)
summary(mtcars)
summary(cars)
plot(cars$speed, cars$dist, xlab = "Speed (miles per hour)",
ylab = "Stopping Distance (ft)", bty = "n", pch = 16,
xlim = c(2, 25), ylim = c(0, 120))
runApp('ShinyAppExample/Swiss')
plot(cars$speed, cars$dist, xlab = "Speed (miles per hour)",
ylab = "Stopping Distance (ft)", bty = "n", pch = 16,
xlim = c(2, 25), ylim = c(0, 120))
legend(25, 250, c("Linear Model Prediction", "Linear Model with Spline Prediction"), pch = 16,
col = c("red", "blue"), bty = "n", cex = 1.2)
points(speedInput, model1pred(), col = "red", pch = 16, cex = 2)
points(speedInput, model2pred(), col = "blue", pch = 16, cex = 2)
})
legend(25, 250, c("Linear Model Prediction", "Linear Model with Spline Prediction"), pch = 16,
col = c("red", "blue"), bty = "n", cex = 1.2)
points(speedInput, model1pred(), col = "red", pch = 16, cex = 2)
points(speedInput, model2pred(), col = "blue", pch = 16, cex = 2)
runApp('ShinyAppExample/Swiss')
legend(25, 250, c("Linear Model Prediction", "Linear Model with Spline Prediction"), pch = 16,
col = c("red", "blue"), bty = "n", cex = 1.2)
?legend
runApp('ShinyAppExample/Swiss')
runApp('ShinyAppExample/Swiss')
runApp('ShinyAppExample/Swiss')
runApp('ShinyAppExample/Swiss')
runApp('ShinyAppExample/Swiss')
runApp('ShinyAppExample/Swiss')
shiny::runApp('ShinyAppExample/CarStoppingDistApp')
?lm
runApp('ShinyAppExample/CarStoppingDistApp')
runApp('ShinyAppExample/CarStoppingDistApp')
runApp('ShinyAppExample/CarStoppingDistApp')
install.packages('rsconnect')
install.packages("rsconnect")
install.packages("rsconnect")
install.packages('rsconnect')
install.packages('rsconnect')
install.packages("rsconnect")
install.packages("rsconnect")
rsconnect::setAccountInfo(name='meganneisler', token='190814A939DDE90826DAE6B8B52412D7', secret='xutytvMYJgql6BLE7rAGwxlzZnad7Y0zfBSELY+U')
shiny::runApp('ShinyAppExample/CarStoppingDistApp')
